// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DBD_Magic.Responses;
//
//    var matchResponse = MatchResponse.FromJson(jsonString);

namespace DBD_Magic.Responses
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MatchResponse
    {
        [JsonProperty("matchId")]
        public Guid MatchId { get; set; }

        [JsonProperty("schema")]
        public long Schema { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("geolocation")]
        public Geolocation Geolocation { get; set; }

        [JsonProperty("creationDateTime")]
        public long CreationDateTime { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("creator")]
        public Guid Creator { get; set; }

        [JsonProperty("customData")]
        public CustomData CustomData { get; set; }

        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("skill")]
        public Skill Skill { get; set; }

        [JsonProperty("churn")]
        public long Churn { get; set; }

        [JsonProperty("props")]
        public Props Props { get; set; }

        [JsonProperty("reason")]
        public string Reason { get; set; }

        [JsonProperty("region")]
        public string Region { get; set; }

        [JsonProperty("sideA")]
        public Guid[] SideA { get; set; }

        [JsonProperty("sideB")]
        public Guid[] SideB { get; set; }
    }

    public partial class CustomData
    {
        [JsonProperty("SessionSettings")]
        public string SessionSettings { get; set; }
    }

    public partial class Geolocation
    {
    }

    public partial class Props
    {
        [JsonProperty("EncryptionKey")]
        public string EncryptionKey { get; set; }

        [JsonProperty("countA")]
        public long CountA { get; set; }

        [JsonProperty("countB")]
        public long CountB { get; set; }

        [JsonProperty("gameMode")]
        public string GameMode { get; set; }

        [JsonProperty("platform")]
        public string Platform { get; set; }

        [JsonProperty("CrossplayOptOut")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool CrossplayOptOut { get; set; }
    }

    public partial class Skill
    {
        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("regions")]
        public Regions Regions { get; set; }
    }

    public partial class Regions
    {
        [JsonProperty("good")]
        public string[] Good { get; set; }

        [JsonProperty("ok")]
        public string[] Ok { get; set; }
    }

    public partial class MatchResponse
    {
        public static MatchResponse FromJson(string json) => JsonConvert.DeserializeObject<MatchResponse>(json, DBD_Magic.Responses.MatchConverter.Settings);
    }

    public static class MatchSerialize
    {
        public static string ToJson(this MatchResponse self) => JsonConvert.SerializeObject(self, DBD_Magic.Responses.MatchConverter.Settings);
    }

    internal static class MatchConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
